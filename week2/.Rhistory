# Encuentra el intervalo y pone la banda
data$BANDAS <- bandas[, 2][findInterval(data$PLAZO, as.numeric(bandas[, 1]))]
# ===== WRITE =====
# Escribe el cuadro (.dbf) en el directorio de trabajo
write.dbf(data, paste("swaps1_plazo_", format(Sys.Date()[1], "%d_%m_%Y"), ".dbf", sep=""))
data
}
swaps1_plazo <- function{
# SALIDA
# swaps1_[fecha].dbf - Archivo tipo .dbf con los resultados
# ===== Librerias y directorios =====
setwd("/Volumes/IAN/Estadisticas/Plazo/SWAPS") # ¿Dónde están mis datos?
library(foreign) # Libreria necesaria para cargar los datos
options(scipen=999)
options(encoding="UFT-8")
# ===== Carga de datos =====
data <- read.dbf("swaps1.dbf", as.is=T)
gc()
udis <- read.dbf("udi2013.dbf", as.is=T)
fix <- read.dbf("tcfix.dbf", as.is=T)
# ===== Código =====
data <- data[complete.cases(data$FE_CON_OPE, data$FE_VEN_OPE, data$MDO,
data$C_IMP_BASE, data$MDA_IMP, data$FE_LIQ_ORI), ]
raros <- data[!complete.cases(data$FE_CON_OPE, data$FE_VEN_OPE, data$MDO,
data$C_IMP_BASE, data$MDA_IMP, data$FE_LIQ_ORI), ]
if(nrow(raros)!=0){
message("Existen registros incompletos")
}
data$FE_CON_OPE <- as.Date(data$FE_CON_OPE) # Cambiar tipo caractér a tipo fecha
data$FE_LIQ_ORI <- as.Date(data$FE_LIQ_ORI)
# ===== Tipo de Institucion =====
data$TIPO_INST <- NA
data$TIPO_INST[substr(data$INSTI, 1, 3) == "013"] <- "CB"
data$TIPO_INST[substr(data$INSTI, 1, 3) != "013"] <- "BM_BD"
# ===== UDIS =====
data$UDIS <- udis$CIERRE[match(data$FE_CON_OPE, as.Date(udis$FE_PUBLI))] # Buscar UDIS y unir con datos
# ===== FIX =====
data$FIX <- fix$CIERRE[match(data$FE_CON_OPE, as.Date(fix$FE_PUBLI))] # Buscar FIX y unir con datos
# ===== IMPORTE =====
data$IMPORTE <- NA
data$IMPORTE[data$MDA_IMP=="MXP"] <- data$C_IMP_BASE[data$MDA_IMP=="MXP"]/2000
data$IMPORTE[data$MDA_IMP=="UDI"] <- data$C_IMP_BASE[data$MDA_IMP=="UDI"]*data$UDIS[data$MDA_IMP=="UDI"]/2000
data$IMPORTE[data$MDA_IMP=="USD"] <- data$C_IMP_BASE[data$MDA_IMP=="USD"]*data$FIX[data$MDA_IMP=="USD"]/2000
# ===== Plazo =====
data$PLAZO <- NA # Crear columna de plazo
# Realiza la diferencia entre fechas, excepto cuando no haya fecha de liquidación
data$PLAZO <- as.numeric(data$FE_LIQ_ORI - data$FE_CON_OPE)
# ===== BANDA =====
# Matriz de bandas
bandas <- matrix(0, nrow=14, ncol=2)
bandas[, 1] <- c(0, 8, 32, 93, 185, 367, 732, 1097, 1462, 1828, 2558, 3654, 5480, 7306)
bandas[, 2] <- c("1 a 7", "8 a 31", "32 a 92", "93 a 184", "185 a 366", "367 a 731", "732 a 1096", "1097 a 1461", "1462 a 1827", "1828 a 2557", "2558 a 3653", "3654 a 5479", "5480 a 7305", "Más de 7306")
# Crear y renombrar columna de bandas
data$BANDAS <- NA
# Encuentra el intervalo y pone la banda
data$BANDAS <- bandas[, 2][findInterval(data$PLAZO, as.numeric(bandas[, 1]))]
# ===== WRITE =====
# Escribe el cuadro (.dbf) en el directorio de trabajo
write.dbf(data, paste("swaps1_plazo_", format(Sys.Date()[1], "%d_%m_%Y"), ".dbf", sep=""))
data
}
setwd("/Volumes/IAN/Estadisticas/Plazo/SWAPS") # ¿Dónde están mis datos?
library(foreign) # Libreria necesaria para cargar los datos
options(scipen=999)
options(encoding="UFT-8")
data <- read.dbf("swaps1.dbf", as.is=T)
gc()
udis <- read.dbf("udi2013.dbf", as.is=T)
fix <- read.dbf("tcfix.dbf", as.is=T)
# ===== Código =====
data <- data[complete.cases(data$FE_CON_OPE, data$FE_VEN_OPE, data$MDO,
data$C_IMP_BASE, data$MDA_IMP, data$FE_LIQ_ORI), ]
raros <- data[!complete.cases(data$FE_CON_OPE, data$FE_VEN_OPE, data$MDO,
data$C_IMP_BASE, data$MDA_IMP, data$FE_LIQ_ORI), ]
if(nrow(raros)!=0){
message("Existen registros incompletos")
}
data <- data[complete.cases(data$FE_CON_OPE, data$FE_VEN_OPE, data$MDO,
data$C_IMP_BASE, data$MDA_IMP, data$FE_LIQ_ORI), ]
raros <- data[!complete.cases(data$FE_CON_OPE, data$FE_VEN_OPE, data$MDO,
data$C_IMP_BASE, data$MDA_IMP, data$FE_LIQ_ORI), ]
if(nrow(raros)!=0){
message("Existen registros incompletos")
}
data$FE_CON_OPE <- as.Date(data$FE_CON_OPE) # Cambiar tipo caractér a tipo fecha
data$FE_LIQ_ORI <- as.Date(data$FE_LIQ_ORI)
data$TIPO_INST <- NA
data$TIPO_INST[substr(data$INSTI, 1, 3) == "013"] <- "CB"
data$TIPO_INST[substr(data$INSTI, 1, 3) != "013"] <- "BM_BD"
# ===== UDIS y FIX =====
data$UDIS <- udis$CIERRE[match(data$FE_CON_OPE, as.Date(udis$FE_PUBLI))] # Buscar UDIS y unir con datos
data$FIX <- fix$CIERRE[match(data$FE_CON_OPE, as.Date(fix$FE_PUBLI))] # Buscar FIX y unir con datos
# ===== IMPORTE =====
data$IMPORTE <- NA
data$IMPORTE[data$MDA_IMP=="MXP"] <- data$C_IMP_BASE[data$MDA_IMP=="MXP"]/2000
data$IMPORTE[data$MDA_IMP=="UDI"] <- data$C_IMP_BASE[data$MDA_IMP=="UDI"]*data$UDIS[data$MDA_IMP=="UDI"]/2000
data$IMPORTE[data$MDA_IMP=="USD"] <- data$C_IMP_BASE[data$MDA_IMP=="USD"]*data$FIX[data$MDA_IMP=="USD"]/2000
# ===== Plazo =====
data$PLAZO <- NA # Crear columna de plazo
# Realiza la diferencia entre fechas, excepto cuando no haya fecha de liquidación
data$PLAZO <- as.numeric(data$FE_LIQ_ORI - data$FE_CON_OPE)
# ===== BANDA =====
# Matriz de bandas
bandas <- matrix(0, nrow=14, ncol=2)
bandas[, 1] <- c(0, 8, 32, 93, 185, 367, 732, 1097, 1462, 1828, 2558, 3654, 5480, 7306)
bandas[, 2] <- c("1 a 7", "8 a 31", "32 a 92", "93 a 184", "185 a 366", "367 a 731", "732 a 1096", "1097 a 1461", "1462 a 1827", "1828 a 2557", "2558 a 3653", "3654 a 5479", "5480 a 7305", "Más de 7306")
# Crear y renombrar columna de bandas
data$BANDAS <- NA
# Encuentra el intervalo y pone la banda
data$BANDAS <- bandas[, 2][findInterval(data$PLAZO, as.numeric(bandas[, 1]))]
# Ian Castillo Rosales
# 26062014
swapsp_junta <- function(ruta){
options(scipen=999)
options(encoding="UTF-8")
source(paste(ruta, "swaps1_plazo.R", sep=""))
source(paste(ruta, "swaps2_plazo.R", sep=""))
source(paste(ruta, "swaps3_plazo.R", sep=""))
source(paste(ruta, "swaps4_plazo.R", sep=""))
s1 <- swaps1_plazo()
s2 <- swaps2_plazo()
s3 <- swaps3_plazo()
s4 <- swaps4_plazo()
s1$SECCION <- "I"
s2$SECCION <- "II"
s3$SECCION <- "III"
s4$SECCION <- "VI"
columnas <- c("INSTI", "FE_CON_OPE", "TIPO_INST", "IMPORTE", "SECTOR", "SECCION")
swaps <- data.frame(matrix(NA, nrow=sum(nrow(s1), nrow(s2), nrow(s3),
nrow(s4)), ncol=12))
colnames(swaps) <- c("INSTI", "FE_CON_OPE", "C_IMP_BASE", "MDA_IMP",
"FE_VEN_ORI", "FE_LIQ_ORI", "TIPO_INST", "UDIS", "FIX",
"IMPORTE", "BANDA", "SECCION")
swaps$SECCION <- c(s1$SECCION, s2$SECCION, s3$SECCION, s4$SECCION)
swaps[swaps$SECCION=="I", ] <- s1[, 1:12]
swaps[swaps$SECCION=="II", columnas] <- s2[, columnas]
swaps[swaps$SECCION=="III", columnas] <- s3[, columnas]
swaps[swaps$SECCION=="VI", columnas] <- s4[, columnas]
write.dbf(swaps, paste("swaps_plazo_", format(Sys.Date()[1], "%d_%m_%Y"), ".dbf", sep=""))
}
swapsp_junta("/Volumes/IAN/Estadisticas/Plazo/R/")
swapsp_junta("/Volumes/IAN/Estadisticas/Plazo/R/")
swapsp_junta <- function(ruta){
options(scipen=999)
options(encoding="UTF-8")
source(paste(ruta, "swaps1_plazo.R", sep=""))
source(paste(ruta, "swaps2_plazo.R", sep=""))
source(paste(ruta, "swaps3_plazo.R", sep=""))
source(paste(ruta, "swaps4_plazo.R", sep=""))
s1 <- swaps1_plazo()
s2 <- swaps2_plazo()
s3 <- swaps3_plazo()
s4 <- swaps4_plazo()
s1$SECCION <- "I"
s2$SECCION <- "II"
s3$SECCION <- "III"
s4$SECCION <- "VI"
columnas <- c("INSTI", "FE_CON_OPE", "TIPO_INST", "IMPORTE", "SECTOR", "SECCION")
swaps <- data.frame(matrix(NA, nrow=sum(nrow(s1), nrow(s2), nrow(s3),
nrow(s4)), ncol=12))
colnames(swaps) <- c("INSTI", "FE_CON_OPE", "C_IMP_BASE", "MDA_IMP",
"FE_VEN_ORI", "FE_LIQ_ORI", "TIPO_INST", "UDIS", "FIX",
"IMPORTE", "BANDA", "SECCION")
swaps$SECCION <- c(s1$SECCION, s2$SECCION, s3$SECCION, s4$SECCION)
swaps[swaps$SECCION=="I", ] <- s1[, 1:12]
swaps[swaps$SECCION=="II", columnas] <- s2[, columnas]
swaps[swaps$SECCION=="III", columnas] <- s3[, columnas]
swaps[swaps$SECCION=="VI", columnas] <- s4[, columnas]
write.dbf(swaps, paste("swaps_plazo_", format(Sys.Date()[1], "%d_%m_%Y"), ".dbf", sep=""))
}
swapsp_junta("/Volumes/IAN/Estadisticas/Plazo/R/")
ruta="/Volumes/IAN/Estadisticas/Plazo/R/"
options(scipen=999)
options(encoding="UTF-8")
source(paste(ruta, "swaps1_plazo.R", sep=""))
source(paste(ruta, "swaps2_plazo.R", sep=""))
source(paste(ruta, "swaps3_plazo.R", sep=""))
source(paste(ruta, "swaps4_plazo.R", sep=""))
s1 <- swaps1_plazo()
s2 <- swaps2_plazo()
s3 <- swaps3_plazo()
s4 <- swaps4_plazo()
s1$SECCION <- "I"
s2$SECCION <- "II"
s3$SECCION <- "III"
s4$SECCION <- "VI"
columnas <- c("INSTI", "FE_CON_OPE", "TIPO_INST", "IMPORTE", "SECTOR", "SECCION")
swaps <- data.frame(matrix(NA, nrow=sum(nrow(s1), nrow(s2), nrow(s3),
nrow(s4)), ncol=12))
columnas <- c("INSTI", "FE_CON_OPE", "TIPO_INST", "IMPORTE", "BANDA", "SECCION")
swaps <- data.frame(matrix(NA, nrow=sum(nrow(s1), nrow(s2), nrow(s3),
nrow(s4)), ncol=12))
colnames(swaps) <- c("INSTI", "FE_CON_OPE", "C_IMP_BASE", "MDA_IMP",
"FE_VEN_ORI", "FE_LIQ_ORI", "TIPO_INST", "UDIS", "FIX",
"IMPORTE", "BANDA", "SECCION")
swaps$SECCION <- c(s1$SECCION, s2$SECCION, s3$SECCION, s4$SECCION)
swaps[swaps$SECCION=="I", ] <- s1[, 1:12]
swaps[swaps$SECCION=="II", columnas] <- s2[, columnas]
swaps[swaps$SECCION=="III", columnas] <- s3[, columnas]
swaps[swaps$SECCION=="VI", columnas] <- s4[, columnas]
View(`s1`)
# Ian Castillo Rosales (BANXICO\T41348)
# Gerencia de Información del Sistema Financiero
# Subgerencia de Información de Moneda Extranjera y Derivados
#
# Validación de información para operaciones con swaps (plazo)
# 040614 - 300414
swapsp_junta <- function(ruta){
# ENTRADA
# ruta = Ruta donde se encuentran los archivos .R para los cálculos
# SALIDA
# swaps_plazo_[fecha].dbf - Archivo tipo .dbf con los resultados
# ===== Librerias y directorios =====
library(foreign) # Libreria necesaria para cargar los datos
options(scipen=999, digits=5) # Quita la notación exp y trunca a 4 decimales
# ===== Funciones =====
source(paste(ruta, "R/swaps1_plazo.R", sep=""), encoding="UFT-8")
source(paste(ruta, "R/swaps2_plazo.R", sep=""), encoding="UFT-8")
source(paste(ruta, "R/swaps3_plazo.R", sep=""), encoding="UFT-8")
source(paste(ruta, "R/swaps4_plazo.R", sep=""), encoding="UFT-8")
s1 <- swaps1_plazo()
s2 <- swaps2_plazo()
s3 <- swaps3_plazo()
s4 <- swaps4_plazo()
# ===== JUNTA =====
s1$SECCION <- "I"
s2$SECCION <- "II"
s3$SECCION <- "III"
s4$SECCION <- "VI"
# Selecciona las columnas de interes
columnas <- c("INSTI", "FE_CON_OPE", "TIPO_INST", "IMPORTE", "BANDA", "SECCION")
swaps <- data.frame(matrix(NA, nrow=sum(nrow(s1), nrow(s2), nrow(s3),
nrow(s4)), ncol=12))
colnames(swaps) <- c("INSTI", "FE_CON_OPE", "C_IMP_BASE", "MDA_IMP",
"FE_VEN_ORI", "FE_LIQ_ORI", "TIPO_INST", "UDIS", "FIX",
"IMPORTE", "BANDA", "SECCION")
swaps$SECCION <- c(s1$SECCION, s2$SECCION, s3$SECCION, s4$SECCION)
swaps[swaps$SECCION=="I", ] <- s1[, 1:12]
swaps[swaps$SECCION=="II", columnas] <- s2[, columnas]
swaps[swaps$SECCION=="III", columnas] <- s3[, columnas]
swaps[swaps$SECCION=="VI", columnas] <- s4[, columnas]
write.dbf(swaps, paste("swaps_plazo_", format(Sys.Date()[1], "%d_%m_%Y"), ".dbf", sep=""))
}
swapsp_junta("/Volumes/IAN 1/Estadisticas/Plazo/")
swapsp_junta("/Volumes/IAN 1/Estadisticas/Plazo/")
c
c
c
c
c
c
c
n
c
c
c
c
c
c
c
c
c
c
c
c
c
c
c()
swapsp_junta("/Volumes/IAN 1/Estadisticas/Plazo/")
ruta="/Volumes/IAN 1/Estadisticas/Plazo/"
library("foreign", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
off_plazo <- read.dbf("/Volumes/IAN/Estadisticas/Plazo/OFF/off_plazo_03072014.dbf")
swaps_plazo <- read.dbf("/Volumes/IAN/Estadisticas/Plazo/SWAPS/swaps_plazo_03072014.dbf")
swaps_plazo <- read.dbf("/Volumes/IAN/Estadisticas/Plazo/SWAPS/swaps_plazo_03_07_2014.dbf")
opto_plazo <- read.dbf("/Volumes/IAN/Estadisticas/Plazo/OPTO/opto_plazo_03072014.dbf")
off_contra <- read.dbf("/Volumes/IAN/Estadisticas/Contraparte/OFF/off_plazo_03072014.dbf")
off_contra <- read.dbf("/Volumes/IAN/Estadisticas/Contraparte/OFF/off_contra_03072014.dbf")
swaps_contra <- read.dbf("/Volumes/IAN/Estadisticas/Contraparte/SWAPS/swaps_contra_03_07_2014.dbf")
swaps_contra <- read.dbf("/Volumes/IAN/Estadisticas/Contraparte/SWAPS/swaps_contra_03072014.dbf")
opto_contra <- read.dbf("/Volumes/IAN/Estadisticas/Contraparte/OPTO/opto_contra_03072014.dbf")
ls()
ls()[1]
apply(ls()[1], 2, function(x) any(is.na(x)))
apply(off_plazo, 2, function(x) any(is.na(x)))
apply(off_contra, 2, function(x) any(is.na(x)))
entidad <- off_contra[is.na(off_contra$TIPO_ENTE), ]
residencia <- off_contra[is.na(off_contra$RESI), ]
sector <- off_contra[is.na(off_contra$SECTOR), ]
View(entidad)
View(sector)
levels(as.factor(entidad$CLASE_OPE))
levels(as.factor(sector$CLASE_OPE))
entidad <- split(entidad, entidad$CLASE_OPE)
View(entidad$FORWARD)
View(entidad$FUTURO)
levels(as.factor(entidad$CLASE_OPE))
levels(as.factor(sector$CLASE_OPE))
entidad$FORWARD$CLASE_OPE
entidad <- off_contra[is.na(off_contra$TIPO_ENTE), ]
residencia <- off_contra[is.na(off_contra$RESI), ]
sector <- off_contra[is.na(off_contra$SECTOR), ]
levels(as.factor(sector$CLASE_OPE))
View(sector)
sector_idspot <- sector[sector$ID_SPOT=="S", ]
apply(sector, 2, function(x) any(is.na(x)))
install.packages("Rserve")
library("Rserve", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
Rserve()
library()
library("rpart", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
Rserve()
install.packages(c("mgcv", "yaml"))
palindrome <- function(p){
for(i in 1:floor(nchar(p)/2)){
r <- nchar(p) - i + 1
if(substr(p, i, i) != substr(p, r, r)) {
"Esto no es un palindromo"
}
}
"Esto es un palindromo"
}
palindromo <- function(p){
for(i in 1:floor(nchar(p)/2)){
r <- nchar(p) - i + 1
if(substr(p, i, i) != substr(p, r, r)) {
"Esto no es un palindromo"
}
}
"Esto es un palindromo"
}
rm(palindrome)
palindromo("Hola")
?floor
p="Hola"
nchar(p)
nchar(p)/2
floor(nchar(p)/2)
1:floor(nchar(p)/2)
i=1
nchar(p) - i + 1
r <- nchar(p) - i + 1
substr(p, i, i)
substr(p, r, r)
i=2
r <- nchar(p) - i + 1
r
substr(p, i, i)
substr(p, r, r)
palindromo <- function(p){
for(i in 1:floor(nchar(p)/2)){
r <- nchar(p) - i + 1
if(substr(p, i, i) != substr(p, r, r)){
"Esto no es un palindromo"
} else{
"Esto es un palindromo"
}
}
}
palindromo("Hola")
palindromo <- function(p) {
for(i in 1:floor(nchar(p)/2) ) {
r <- nchar(p) - i + 1
if ( substr(p, i, i) != substr(p, r, r) ) return(FALSE)
}
TRUE
}
palindromo("Hola")
palindromo("Ana")
palindromo("reconocer")
palindromo <- function(p) {
for(i in 1:floor(nchar(p)/2) ) {
r <- nchar(p) - i + 1
if ( substr(p, i, i) != substr(p, r, r) ) return("Intentalo de nuevo")
}
"Felicidades! Tienes un palindromo en tus manos"
}
palindromo("reconocer")
conexion <- url("http://biostat.jhsph.edu/~jleek/contact.html")
HTMLCode <- readLines(conexion)
close(conexion)
head(HTMLCode)
HTMLCode[10]
nchar(HTMLCode[10])
nchar((HTMLCode)[10, 20, 30, 100])
nchar(HTMLCode[20])
nchar(HTMLCode[10])
nchar(HTMLCode[20])
nchar(HTMLCode[30])
nchar(HTMLCode[100])
class(HTMLCode)
dim(HTMLCode)
read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
data_fwf <- read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
?read.fwf
data_fwf <- read.fwf("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for", widths = c(1, 2, 3))
data_fwf <- read.fwf(
file=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"),
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
head(data_fwf)
sum(head(data_fwf)[, 4])
class(data_fwf)
apply(data_fwf, 2, sum)
apply(data_fwf, 2, sum())
apply(data_fwf, 2, sum
)
str(data_fwf)
apply(data_fwf[-1], 2, sum)
View(data_fwf)
View(data_fwf)
apply(data_fwf[6, 7], 2, sum)
data_fwf[6, 7]
apply(data_fwf[, c(6, 7)], 2, sum)
sum(apply(data_fwf[, c(6, 7)], 2, sum))
sum(apply(data_fwf[, c(8, 9)], 2, sum))
sum(apply(data_fwf[, c(6, 7)], 2, sum))
apply(data_fwf[, c(6, 7)], 2, sum)
data_fwf <- read.fwf(
file=url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"),
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
con <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
close(con)
close(con)
con <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
data_fwf <- read.fwf(file=con, skip=4, widths=c(12,7,4,9,4,9,4,9,4))
close(con)
con <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
data_fwf <- read.fwf(file=con, skip=4, widths=c(12,7,4,9,4,9,4,9,4))
close(con)
con <- url("http://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
data_fwf <- read.fwf(file=con, skip=4, widths=c(12,7,4,9,4,9,4,9,4))
close(con)
head(data_fwf)
class(data_fwf)
str(data_fwf)
apply(data_fwf[, c(6, 7)], 2, sum)
sum(apply(data_fwf[, c(6, 7)], 2, sum))
sum(apply(data_fwf[, c(8, 9)], 2, sum))
View(data_fwf)
sum(apply(data_fwf[, c(8, 9)], 2, sum))
con <- url("http://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
data_fwf <- read.fwf(file=con, skip=4, widths=c(11,9,4,9,4,9,4,9,4))
close(con)
View(data_fwf)
con <- url("http://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
data_fwf <- read.fwf(file=con, skip=4, widths=c(11,8,4,9,4,9,4,9,4))
close(con)
con <- url("http://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
data_fwf <- read.fwf(file=con, skip=4, widths=c(11,8,4,9,4,9,4,9,4))
close(con)
View(data_fwf)
apply(data_fwf[, c(8, 9)], 2, sum)
sum(apply(data_fwf[, c(8, 9)], 2, sum))
close(con)
con <- url("http://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
data_fwf <- read.fwf(file=con, skip=4, widths=c(11,8,4,9,4,9,4,9,4))
close(con)
View(data_fwf)
sum(apply(data_fwf[, c(8, 9)], 2, sum))
sum(data_fwf[, 4])
library(httr)
require(httpuv)
install.packages(c("httpuv", "jsonlite"))
require(httpuv)
require(jsonlite)
oauth_endpoints("github")
myapp <- oauth_app("quiz2", "ddb0d599de51ccd02f4b", secret="6af1109f6ecf442d292425087d49bb13d9bbe9c8")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
require(httpuv)
require(jsonlite)
oauth_endpoints("github")
myapp <- oauth_app("quiz2", "041fe7d5df66f8834c1b", secret="85ab3505e732f175f8f4369367ee4db1abdbe4a6")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
output <- content(req)
list(output[[4]]$name, output[[4]]$created_at)
output[[4]]
output[[4]]$name
lala <- output[[4]]
lala$created_at
lala$creat
list(output[[5]]$name, output[[5]]$creat)
conexion <- url("http://biostat.jhsph.edu/~jleek/contact.html")
HTMLCode <- readLines(conexion)
close(conexion)
class(HTMLCode)
head(HTMLCode)
nchar(HTMLCode[10])
nchar(HTMLCode[20])
nchar(HTMLCode[30])
nchar(HTMLCode[100])
con <- url("http://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
data_fwf <- read.fwf(file=con, skip=4, widths=c(11,8,4,9,4,9,4,9,4))
close(con)
sum(data_fwf[, 4])
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies, smooth = "loess")
setwd("~/Desktop/repos/devf/week2")
data_recu <- read.csv("data_recu.csv", as.is = T)
data_nrec <- read.csv("data_nrec.csv", as.is = T)
